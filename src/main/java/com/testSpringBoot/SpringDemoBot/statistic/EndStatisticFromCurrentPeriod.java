package com.testSpringBoot.SpringDemoBot.statistic;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
@Slf4j
@Component
public class EndStatisticFromCurrentPeriod {
    @Autowired
    private PreviousStatValues previousStatValues;
    @Autowired
    private CurrentStatValues currentStatValues;

    public String messageEndStatisticFromCurrentPeriod (Long chatId,int currentDays){

        //–ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        Map<String, Double> currentResultMap = currentStatValues.getMeanQuest(chatId, currentDays);
        Map<String, Double> previousResultMap = previousStatValues.getMeanQuest(chatId,currentDays);

        //–ø–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
        double totalSum = calculateTotalSum(previousResultMap, currentResultMap);

        //–ø–æ–ª—É—á–∞–µ–º –º–∞–∫—Å –∏ –º–∏–Ω –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
        Map<String, Object> maxAndMinValues = findMaxAndMinCategory(previousResultMap, currentResultMap);
        String maxCategoryName = (String) maxAndMinValues.get("Max Category Name");
        double maxCategoryValue = (double) maxAndMinValues.get("Max Category Value");
        String minCategoryName = (String) maxAndMinValues.get("Min Category Name");
        double minCategoryValue = (double) maxAndMinValues.get("Min Category Value");

        DecimalFormat df = new DecimalFormat("0.0");
        df.setDecimalSeparatorAlwaysShown(true); // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–∞–∂–µ –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        String formattedMaxCategoryValue = df.format(maxCategoryValue);
        String formattedMinCategoryValue = df.format(minCategoryValue);
        String formattedTotalSum = df.format(totalSum);

        //—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π
        StringBuilder mean = new StringBuilder();

        if (totalSum > 2 ) {
            mean.append("–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –¢–≤–æ–π –æ–±—â–∏–π —Å—á–µ—Ç —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ " + formattedTotalSum +
                    " –±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é, —á—Ç–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ —Ç–≤–æ–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ. \uD83D\uDE0A \n\n");
            for (int i = 0; i < (int) totalSum; i++) {
                mean.append("üü¢");
            }
        }
        else if ((totalSum < 2) && (totalSum > 0) ) {
            mean.append("–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –¢–≤–æ–π –æ–±—â–∏–π —Å—á–µ—Ç —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ " + formattedTotalSum +
                    " –±–∞–ª–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é \uD83D\uDC4C \n\n");
            for (int i = 0; i < (int) totalSum; i++) {
                mean.append("üü¢");
            }
        }
        else if (totalSum == 0) {
            mean.append("–ß–µ—Ç–∫–æ! –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å—É–º–º–∞ —Ç–≤–æ–∏—Ö –±–∞–ª–ª–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏ —Ä–∞–≤–Ω–∞ " + formattedTotalSum +
                    " , —É —Ç–µ–±—è –≤—Å–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ \uD83D\uDC4C \n\n");
                mean.append("‚ö™Ô∏è");

        }
        else if (totalSum < 0) {
            mean.append("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç–≤–æ–π –æ–±—â–∏–π —Å—á–µ—Ç —É–ø–∞–ª –Ω–∞ " + formattedTotalSum +
                    " ,–Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–≤–æ–¥ –¥–ª—è –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞. " +
                    "\n–í–µ—Ä–æ—è—Ç–Ω–æ, —Ç—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏" +
                    " —Å–≤–æ–∏—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π. \uD83D\uDC99 \n\n");
            for (int i = 0; i < (int) Math.abs(totalSum); i++) {
                mean.append("üî¥");
            }
        }
        mean.append("\n\n–¢—ã –¥–æ—Å—Ç–∏–≥ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \""+maxCategoryName+ "\",–≥–¥–µ —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å –Ω–∞ "
                + formattedMaxCategoryValue + " –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –ø–µ—Ä–∏–æ–¥–æ–º \uD83D\uDC4D \n");
        for (int i = 0; i < (int) Math.abs(maxCategoryValue); i++) {
            mean.append("üü¢");
        }
        mean.append("\n\n–ù–∞–∏–±–æ–ª—å—à–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"" + minCategoryName + "\",–≥–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç " +
                "—Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ " + formattedMinCategoryValue + " \uD83E\uDD37 \n\n");
        for (int i = 0; i < Math.abs(minCategoryValue); i++) {
            mean.append("üî¥");
        }

        return mean.toString();
    }

    //–°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥.
    private double calculateTotalSum(Map<String, Double> previousResultMap, Map<String, Double> currentResultMap) {
        double totalSum = 0.0;

        for (Map.Entry<String, Double> entry : currentResultMap.entrySet()) {
            String key = entry.getKey();
            double currentValue = entry.getValue();

            if (previousResultMap.containsKey(key)) {
                double previousValue = previousResultMap.get(key);
                double sum = -(previousValue) + currentValue;
                totalSum += sum;
            }
        }

        return totalSum;
    }

    //–ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤ –ø–ª—é—Å –∏ –≤ –º–∏–Ω—É—Å
   private Map<String, Object> findMaxAndMinCategory(Map<String, Double> previousResultMap, Map<String, Double> currentResultMap) {
       List<String> maxCategories = new ArrayList<>();
       List<String> minCategories = new ArrayList<>();
       double maxValueCategory = Double.NEGATIVE_INFINITY;
       double minValueCategory = Double.POSITIVE_INFINITY;

       for (Map.Entry<String, Double> entry : currentResultMap.entrySet()) {
           String key = entry.getKey();
           double currentValue = entry.getValue();

           if (previousResultMap.containsKey(key)) {
               double previousValue = previousResultMap.get(key);
               double sum = -(previousValue) + currentValue;

               if (sum > maxValueCategory) {
                   maxCategories.clear();
                   maxCategories.add(key);
                   maxValueCategory = sum;
               } else if (sum == maxValueCategory) {
                   maxCategories.add(key);
               }

               if (sum < minValueCategory) {
                   minCategories.clear();
                   minCategories.add(key);
                   minValueCategory = sum;
               } else if (sum == minValueCategory) {
                   minCategories.add(key);
               }
           }
       }

       String maxNameCategory = String.join(", ", maxCategories);
       String minNameCategory = String.join(", ", minCategories);

       Map<String, Object> maxAndMinValues = new HashMap<>();
       maxAndMinValues.put("Max Category Name", maxNameCategory);
       maxAndMinValues.put("Max Category Value", maxValueCategory);
       maxAndMinValues.put("Min Category Name", minNameCategory);
       maxAndMinValues.put("Min Category Value", minValueCategory);

       return maxAndMinValues;
   }


}
