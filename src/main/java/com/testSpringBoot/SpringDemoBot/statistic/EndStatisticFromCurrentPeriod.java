package com.testSpringBoot.SpringDemoBot.statistic;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Component
public class EndStatisticFromCurrentPeriod {
    @Autowired
    private PreviousStatValues previousStatValues;
    @Autowired
    private CurrentStatValues currentStatValues;

    public String messageEndStatisticFromCurrentPeriod (Long chatId,int currentDays){

        //–ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        Map<String, Double> currentResultMap = currentStatValues.getMeanQuest(chatId, currentDays);
        Map<String, Double> previousResultMap = previousStatValues.getMeanQuest(chatId,currentDays);

        //–ø–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
        double totalSum = calculateTotalSum(previousResultMap, currentResultMap);

        //–ø–æ–ª—É—á–∞–µ–º –º–∞–∫—Å –∏ –º–∏–Ω –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
        Map<String, Object> maxAndMinValues = findMaxAndMinCategory(previousResultMap, currentResultMap);
        String maxCategoryName = (String) maxAndMinValues.get("Max Category Name");
        double maxCategoryValue = (double) maxAndMinValues.get("Max Category Value");
        String minCategoryName = (String) maxAndMinValues.get("Min Category Name");
        double minCategoryValue = (double) maxAndMinValues.get("Min Category Value");

        //–¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è 1 —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        DecimalFormat df = new DecimalFormat("#.0");
        String formattedMaxCategoryValue = df.format(maxCategoryValue);
        String formattedMinCategoryValue = df.format(minCategoryValue);

        //—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π
        StringBuilder mean = new StringBuilder();

        if (totalSum > 2 ) {
            mean.append("–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å—É–º–º–∞ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –±–∞–ª–ª–æ–≤ –ø–æ–≤—ã—Å–∏–ª–∞—Å—å –Ω–∞ " + totalSum +
                    " , —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞ —Ç–≤–æ–∏ –∏–¥—É—Ç –≤ –≥–æ—Ä—É \uD83D\uDE0A \n\n");
            for (int i = 0; i < (int) totalSum; i++) {
                mean.append("üü¢");
            }
        }
        else if ((totalSum < 2) && (totalSum > 0) ) {
            mean.append("–ù–µ–ø–ª–æ—Ö–æ! –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å—É–º–º–∞ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –±–∞–ª–ª–æ–≤ –ø–æ–≤—ã—Å–∏–ª–∞—Å—å –Ω–∞ " + totalSum +
                    " ,—Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç \uD83D\uDC4C \n\n");
            for (int i = 0; i < (int) totalSum; i++) {
                mean.append("üü¢");
            }
        }
        else if (totalSum == 0) {
            mean.append("–ß–µ—Ç–∫–æ! –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å—É–º–º–∞ —Ç–≤–æ–∏—Ö –±–∞–ª–ª–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏ —Ä–∞–≤–Ω–∞ " + totalSum +
                    " , —É —Ç–µ–±—è –≤—Å–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ \uD83D\uDC4C \n\n");
                mean.append("‚ö™Ô∏è");

        }
        else if (totalSum < 0) {
            mean.append("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å—É–º–º–∞ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ " + totalSum +
                    ". –≠—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—Å–µ –ø–ª–æ—Ö–æ. –í–æ–∑–º–æ–∂–Ω–æ, —É —Ç–µ–±—è —Å–µ–π—á–∞—Å —Ç—Ä—É–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ " +
                    "–∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏—è \uD83D\uDC99 \n\n");
            for (int i = 0; i < (int) Math.abs(totalSum); i++) {
                mean.append("üî¥");
            }
        }
        mean.append("\n\n–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —É —Ç–µ–±—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \""+maxCategoryName+ "\", —Ç–≤–æ—è –æ—Ü–µ–Ω–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å " +
                "–Ω–∞ "+ formattedMaxCategoryValue + " –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É \uD83D\uDC4D \n");
        for (int i = 0; i < (int) Math.abs(maxCategoryValue); i++) {
            mean.append("üü¢");
        }
        mean.append("\n\n–°–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ –±—ã–ª–æ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π \"" + minCategoryName + "\", –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É–ø–∞–ª " +
                "–Ω–∞ "+ formattedMinCategoryValue + " \uD83E\uDD37 \n\n");
        for (int i = 0; i < Math.abs(minCategoryValue); i++) {
            mean.append("üî¥");
        }

        return mean.toString();
    }





    private double calculateTotalSum(Map<String, Double> previousResultMap, Map<String, Double> currentResultMap) {
        double totalSum = 0.0;

        for (Map.Entry<String, Double> entry : currentResultMap.entrySet()) {
            String key = entry.getKey();
            double currentValue = entry.getValue();

            if (previousResultMap.containsKey(key)) {
                double previousValue = previousResultMap.get(key);
                double sum = -(previousValue) + currentValue;
                totalSum += sum;
            }
        }

        return totalSum;
    }

   /* private Map<String, Object> findMaxAndMinCategory(Map<String, Double> previousResultMap, Map<String, Double> currentResultMap) {
        String maxNameCategory = null;
        String minNameCategory = null;
        double maxValueCategory = Double.NEGATIVE_INFINITY;
        double minValueCategory = Double.POSITIVE_INFINITY;

        for (Map.Entry<String, Double> entry : currentResultMap.entrySet()) {
            String key = entry.getKey();
            double currentValue = entry.getValue();

            if (previousResultMap.containsKey(key)) {
                double previousValue = previousResultMap.get(key);
                double sum = -(previousValue) + currentValue;

                if (sum > maxValueCategory) {
                    maxNameCategory = key;
                    maxValueCategory = sum;
                }

                if (sum < minValueCategory) {
                    minNameCategory = key;
                    minValueCategory = sum;
                }
            }
        }

        Map<String, Object> maxAndMinValues = new HashMap<>();
        maxAndMinValues.put("Max Category Name", maxNameCategory);
        maxAndMinValues.put("Max Category Value", maxValueCategory);
        maxAndMinValues.put("Min Category Name", minNameCategory);
        maxAndMinValues.put("Min Category Value", minValueCategory);

        return maxAndMinValues;
    }*/
   private Map<String, Object> findMaxAndMinCategory(Map<String, Double> previousResultMap, Map<String, Double> currentResultMap) {
       List<String> maxCategories = new ArrayList<>();
       List<String> minCategories = new ArrayList<>();
       double maxValueCategory = Double.NEGATIVE_INFINITY;
       double minValueCategory = Double.POSITIVE_INFINITY;

       for (Map.Entry<String, Double> entry : currentResultMap.entrySet()) {
           String key = entry.getKey();
           double currentValue = entry.getValue();

           if (previousResultMap.containsKey(key)) {
               double previousValue = previousResultMap.get(key);
               double sum = -(previousValue) + currentValue;

               if (sum > maxValueCategory) {
                   maxCategories.clear();
                   maxCategories.add(key);
                   maxValueCategory = sum;
               } else if (sum == maxValueCategory) {
                   maxCategories.add(key);
               }

               if (sum < minValueCategory) {
                   minCategories.clear();
                   minCategories.add(key);
                   minValueCategory = sum;
               } else if (sum == minValueCategory) {
                   minCategories.add(key);
               }
           }
       }

       String maxNameCategory = String.join(", ", maxCategories);
       String minNameCategory = String.join(", ", minCategories);

       Map<String, Object> maxAndMinValues = new HashMap<>();
       maxAndMinValues.put("Max Category Name", maxNameCategory);
       maxAndMinValues.put("Max Category Value", maxValueCategory);
       maxAndMinValues.put("Min Category Name", minNameCategory);
       maxAndMinValues.put("Min Category Value", minValueCategory);

       return maxAndMinValues;
   }


}
